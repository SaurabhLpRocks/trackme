{"version":3,"sources":["server.ts"],"names":["connect"],"mappings":"AACA,IAAO,OAAO,WAAU,SAAS,CAAC,CAAC;AACnC,IAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AACtC,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAElC,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAG9B,IAAO,UAAU,WAAW,aAAa,CAAC,CAAC;AAC3C,IAAO,MAAM,WAAW,gBAAgB,CAAC,CAAC;AAE1C,IAAI,GAAG,GAAG,OAAO,EAAE,CAAC;AACpB,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;AAG1C,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAC7C,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AAChD,OAAO,EAAE,CAAC;AACV;IACIA,IAAIA,OAAOA,GAAGA,EAAEA,MAAMA,EAAEA,EAAEA,aAAaA,EAAEA,EAAEA,SAASA,EAAEA,CAACA,EAAEA,EAAEA,EAAEA,CAACA;IAC9DA,QAAQA,CAACA,OAAOA,CAACA,mCAAmCA,EAAEA,OAAOA,CAACA,CAACA;AACnEA,CAACA;AAQD,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC;AAC9D,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC,CAAC,CAAC;AACpE,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACvB,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC;IAC1B,QAAQ,EAAE,IAAI;CACjB,CAAC,CAAC,CAAC;AACJ,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;AAGjD,GAAG,CAAC,GAAG,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI;IAC3B,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,0BAA0B,CAAC,CAAC,CAAC;QAC5D,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACnC,CAAC;IACD,MAAM,CAAC,IAAI,EAAE,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAGzB,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,UAAC,GAAG,EAAE,GAAG;IACnB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC;AAGH,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AAIvB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;IACxB,OAAO,CAAC,GAAG,CAAC,2BAAyB,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,MAAG,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","file":"server.js","sourcesContent":["///<reference path=\"../../typings/node/node.d.ts\" />\r\nimport express= require('express');\r\nimport mongoose = require('mongoose');\r\nimport logger = require('morgan');\r\nimport fs = require('fs');\r\nimport path = require('path');\r\nimport join = path.join;\r\nimport cookieParser = require('cookie-parser');\r\nimport bodyParser = require('body-parser');\r\nimport router = require('./routes/route');\r\n\r\nlet app = express();\r\napp.set('port', process.env.PORT || 3000); // Set port to 3000 or the provided PORT variable\r\n\r\n// to connect to mogo database\r\nmongoose.connection.on('error', console.log);\r\nmongoose.connection.on('disconnected', connect);\r\nconnect();\r\nfunction connect() {\r\n    var options = { server: { socketOptions: { keepAlive: 1 } } };\r\n    mongoose.connect('mongodb://localhost:27017/TrackMe', options);\r\n}\r\n \r\n//to set the view engine and view directory\r\n// app.engine('html',);\r\n// app.set('views', path.join(__dirname, '../public'));\r\n// app.set('view engine', 'ejs');\r\n\r\n//app.use(express.static(path.join(__dirname, '/public')));\r\napp.use(express.static(path.join(__dirname, '../../public')));\r\napp.use(express.static(path.join(__dirname, '../../node_modules')));\r\napp.use(logger('dev')); // Log requests to the console\r\napp.use(bodyParser.json());// Parse JSON data and put it into an object which we can access\r\napp.use(bodyParser.urlencoded({\r\n    extended: true\r\n}));\r\napp.use(bodyParser.text({ type: 'text/plain' }));\r\n\r\n//to parse the req body if the response in text format\r\napp.use(function(req, res, next) {\r\n    if (req.headers['content-type'] == \"text/plain;charset=UTF-8\") {\r\n        req.body = JSON.parse(req.body)\r\n    }\r\n    return next();\r\n});\r\n//routing api\r\napp.use('/api/', router);\r\n\r\n//to load  home  page\r\napp.use('/*', (req, res) => {\r\n    res.sendFile(path.join(__dirname, '../../public/022.html'));\r\n});\r\n\r\n//for loggin    \r\napp.use(logger('dev'));\r\n/**\r\n * Start app\r\n */\r\napp.listen(app.get('port'), () => {\r\n    console.log(`App listening on port ${app.get('port')}!`);\r\n});\r\n\r\nmodule.exports = app;\r\n\r\n"],"sourceRoot":"/source/"}