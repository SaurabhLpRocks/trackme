{"version":3,"sources":["controller/taskController.ts"],"names":[],"mappings":"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","file":"controller/taskController.js","sourcesContent":["/// <reference path=\"../../../typings/tsd.d.ts\"/>\r\nimport mongoose = require('mongoose');\r\nlet Project = require('../model/project/project');\r\nlet Developer = require('../model/developer/developer');\r\nlet Task = require('../model/task/task');\r\nimport {Request, Response} from \"express\";\r\n\r\nlet taskController = {\r\n    post: (req: Request, res: Response) => {\r\n        Task.create({\r\n            title: req.body.title,\r\n            description: req.body.description,\r\n            complitionDate: req.body.complitionDate,\r\n            developer: req.body.developer,\r\n            project: req.body.project,\r\n            time: req.body.time,\r\n            status: 'Incomplete'\r\n        }, (err, task) => {\r\n            if (err) return res.send(err);\r\n            return res.send(task);\r\n        });\r\n    },\r\n    // to get all\r\n    get: (req: Request, res: Response) => {\r\n\r\n        var filter = {};\r\n        //To  add the condition for the project\r\n        if (req.query.project != undefined) filter['project'] = req.query.project;// query = query.where('project').equals(req.query.project);\r\n        //To  add the condition for the developer\r\n        if (req.query.developer != undefined) filter['developer'] = req.query.developer;//  query = query.where('developer').equals(req.query.developer);\r\n        //To  add the condition for the status\r\n        if (req.query.status != undefined) filter['status'] = req.query.status;// query = query.where('status').equals(req.query.status);\r\n        //\r\n        Task.paginate(filter, { page: req.query.page || 1, limit: req.query.limit || 2 }, function(err, result) {\r\n            if (err) return res.send(err);\r\n            return res.send(result);\r\n        });\r\n    },\r\n   \r\n    //\r\n    put: (req: Request, res: Response) => {\r\n        let task = req.body;\r\n        Task.findById(task._id, (err, dbtask) => {\r\n            if (err) return res.send(err);\r\n            //\r\n            dbtask.title = task.title;\r\n            dbtask.description = task.description;\r\n            dbtask.complitionDate = task.complitionDate;\r\n            dbtask.developer = task.developer._id;\r\n            dbtask.time = task.time;\r\n            dbtask.status = task.status;\r\n            dbtask.save();\r\n            return res.send(dbtask);\r\n        });\r\n    },\r\n    delete: (req: Request, res: Response) => {\r\n        Task.findById(req.params.id, (err, task) => {\r\n            task.isDeleted = true;\r\n            task.save();\r\n            return res.send(task);\r\n        });\r\n    },\r\n}\r\nexport =  taskController;"],"sourceRoot":"/source/"}