{"version":3,"sources":["controller/projectController.ts"],"names":[],"mappings":"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","file":"controller/projectController.js","sourcesContent":["/// <reference path=\"../../../typings/tsd.d.ts\"/>\r\nimport mongoose = require('mongoose');\r\nlet Project = require('../model/project/project');\r\nlet Developer = require('../model/developer/developer');\r\nimport {Request, Response} from \"express\";\r\n\r\nlet projectController = {\r\n    getProject: (req:Request, res:Response) => {\r\n        Project.findById(req.params.id).populate('manager').populate('developer').exec((err, project) => {\r\n            if (err) return res.send(err);\r\n            return res.send(project);\r\n        });\r\n    },\r\n    getAllProject: (req:Request, res:Response) => {\r\n        Project.find().populate('manager').populate('developer').exec((err, project) => {\r\n            if (err) return res.send(err);\r\n            return res.send(project);\r\n        });\r\n    },\r\n    post: (req:Request, res:Response) => {\r\n        var newProject = new Project({\r\n            name: req.body.name,\r\n            description: req.body.description,\r\n            technology: req.body.technology,\r\n            startDate: req.body.startDate,\r\n            endDate: req.body.endDate,\r\n            status: req.body.status || 'Active',\r\n            isActive: true,\r\n            client: req.body.client,\r\n        });\r\n        newProject.save((err, project) => {\r\n            if (!err) {\r\n                Developer.findById(req.body.manager, (err, manager) => {\r\n                    if (!err) {\r\n                        if (manager) {\r\n                            project.manager = manager;\r\n                            project.save();\r\n                        }\r\n                    }\r\n                });\r\n                req.body.developer.forEach(dev => {\r\n                    Developer.findById(dev, (err, developer) => {\r\n                        if (!err) {\r\n                            if (developer) {\r\n                                project.developer.push(developer);\r\n                                developer.project.push(project);\r\n                                developer.save();\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n                project.save();\r\n                res.send(project);\r\n            }\r\n        });\r\n    },\r\n    put: (req:Request, res:Response) => {\r\n\r\n    },\r\n    delete: (req:Request, res:Response) => {\r\n\r\n    }\r\n}\r\nexport = projectController;\r\n"],"sourceRoot":"/source/"}